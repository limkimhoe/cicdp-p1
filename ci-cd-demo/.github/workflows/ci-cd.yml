name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          ci-cd-demo/web/package-lock.json
          ci-cd-demo/api/package-lock.json

    - name: Install API dependencies
      run: |
        cd ci-cd-demo/api
        npm ci

    - name: Install Web dependencies
      run: |
        cd ci-cd-demo/web
        npm ci

    - name: Install Playwright Browsers
      run: |
        cd ci-cd-demo/web
        npx playwright install --with-deps

    - name: Lint API code
      run: |
        cd ci-cd-demo/api
        npm run lint || echo "No lint script found for API"

    - name: Lint Web code
      run: |
        cd ci-cd-demo/web
        npm run lint

    - name: Setup test database
      run: |
        cd ci-cd-demo/api
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/testdb"
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

    - name: Build API
      run: |
        cd ci-cd-demo/api
        npm run build || npx tsc
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

    - name: Build Web
      run: |
        cd ci-cd-demo/web
        npm run build

    - name: Start API server in background
      run: |
        cd ci-cd-demo/api
        npm start &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        PORT: 5175
        JWT_SECRET: test-secret-key-for-ci
        NODE_ENV: test

    - name: Run Playwright tests
      run: |
        cd ci-cd-demo/web
        npm run e2e
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: ci-cd-demo/web/playwright-report/
        retention-days: 30

  build-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          ci-cd-demo/web/package-lock.json
          ci-cd-demo/api/package-lock.json

    - name: Install dependencies
      run: |
        cd ci-cd-demo/api && npm ci
        cd ../web && npm ci

    - name: Build applications
      run: |
        cd ci-cd-demo/api
        npm run build || npx tsc
        cd ../web
        npm run build

    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        cp -r ci-cd-demo/api/dist deployment/api || cp -r ci-cd-demo/api/src deployment/api
        cp -r ci-cd-demo/api/package*.json deployment/api/
        cp -r ci-cd-demo/api/prisma deployment/api/
        cp -r ci-cd-demo/web/dist deployment/web
        tar -czf deployment.tar.gz deployment/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7

    # Deployment steps would go here
    # Examples for different deployment targets:
    
    # Deploy to Vercel (example)
    # - name: Deploy to Vercel
    #   uses: vercel/action@v1
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
    #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
    #     working-directory: ci-cd-demo/web
    
    # Deploy to Heroku (example)
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.12
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: "your-email@example.com"
    #     usedocker: true
    
    # Deploy to AWS/Docker/etc.
    # Add your deployment steps here

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          ci-cd-demo/web/package-lock.json
          ci-cd-demo/api/package-lock.json

    - name: Install dependencies
      run: |
        cd ci-cd-demo/api && npm ci
        cd ../web && npm ci

    - name: Run security audit
      run: |
        cd ci-cd-demo/api
        npm audit --audit-level moderate
        cd ../web
        npm audit --audit-level moderate

    - name: Check for vulnerabilities
      run: |
        cd ci-cd-demo/api
        npx audit-ci --moderate
        cd ../web
        npx audit-ci --moderate
      continue-on-error: true
